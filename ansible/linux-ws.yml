- name: arch linux cloud image
  hosts: pvetmp
  tasks:
    - uri:
        url: https://geo.mirror.pkgbuild.com/images/latest/Arch-Linux-x86_64-cloudimg.qcow2.SHA256
        return_content: yes
      register: response
    - set_fact:
        dest_checksum: "{{'sha256:' + response.content | regex_search('^[0-9a-f]+') }}"
    - get_url:
        url: https://geo.mirror.pkgbuild.com/images/latest/Arch-Linux-x86_64-cloudimg.qcow2
        dest: "~/Arch-Linux-x86_64-cloudimg.qcow2"
        checksum: "{{ dest_checksum }}"

# - name: create vm
#   hosts: pvetmp
#   tasks:
#     - shell:
#         cmd: "qm stop 420 -overrule-shutdown 1 && qm destroy 420 --purge"
#       ignore_errors: true # error expected if vm does not exist yet
#     - shell: |
#         qm create 420 \
#         --agent 1 \
#         --bios ovmf \
#         --boot order=scsi0 \
#         --cores 16 \
#         --cpu host \
#         --efidisk0 local-lvm:0,efitype=4m \
#         --ide0 local-lvm:cloudinit,media=cdrom \
#         --ipconfig0 ip=192.168.0.4/24,gw=192.168.0.1 \
#         --machine q35 \
#         --memory 16384 \
#         --name workstation \
#         --net0 virtio,bridge=vmbr0 \
#         --numa 0 \
#         --ostype l26 \
#         --rng0 source=/dev/urandom \
#         --scsi0 local-lvm:0,import-from=/root/Arch-Linux-x86_64-cloudimg.qcow2 \
#         --scsihw virtio-scsi-single \
#         --sshkeys ~/.ssh/authorized_keys \
#         --sockets 1 \
#     - shell: qm disk resize 420 scsi0 60G
#     - shell: qm start 420

- name: wait for vm to initialize
  hosts: workstation
  gather_facts: no
  tasks:
    - name: wait for connectivity
      wait_for_connection:
        timeout: 120

- name: user, gui, and packages
  hosts: workstation
  become: yes
  tasks:
    - pacman:
        update_cache: true
        upgrade: true
      register: syu
      retries: 10
      delay: 6
      until: not syu.failed
    - pacman:
        name:
          - qemu-guest-agent
          - gnome
          - git
          - base-devel # aur mkpkg
          - lsof # vscode from aur
          - chromium # oauth in vscode
          - docker
    - user:
        name: axel
        comment: "Axel Rose"
        password: "{{ 'gunsnroses' | password_hash('sha512', pw_salt) }}"
        shell: /bin/bash
        groups: docker
    - authorized_key:
        user: axel
        state: present
        exclusive: yes
        key: "{{ pub_key }}"
    - systemd:
        name: gdm
        enabled: yes
        state: started
    - systemd:
        name: docker
        enabled: yes
        state: started

# - name: create packages from arch user repository
#   hosts: workstation
#   tasks:
#     - file:
#         state: absent
#         path: "/tmp/visual-studio-code-bin/"
#     - git:
#         repo: https://aur.archlinux.org/visual-studio-code-bin.git
#         dest: /tmp/visual-studio-code-bin
#     # Running makepkg as root is not allowed
#     # as it can cause permanent, catastrophic damage to your system.
#     - shell:
#         chdir: /tmp/visual-studio-code-bin
#         cmd: makepkg --clean --force
#     - shell:
#         cmd: ls /tmp/visual-studio-code-bin/ | grep "^visual-studio-code-bin-[0-9]"
#       register: ls
#     - set_fact:
#         package_file: "{{ '/tmp/visual-studio-code-bin/' + ls.stdout }}"

# - name: install aur package
#   hosts: workstation
#   become: yes
#   tasks:
#     - pacman:
#         name: "{{ package_file }}"

- name: vscode extensions
  hosts: workstation
  vars:
    - ansible_user: axel
  tasks:
    - command:
        cmd: |
          code --install-extension ms-vscode-remote.remote-containers
